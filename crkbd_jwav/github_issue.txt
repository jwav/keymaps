## TLDR

When I'm on layer 6, the hold function of LT(1, KC_ENT) doesn't work but LT(7, KC_ENT) does.

## Note: I use an old-ish version

I use QMK Firmware 0.12.50.
The newest version doesn't work well after flashing and it's a pain to debug.
I know it's outdated but I haven't seen mention of anything related to "layer tap" or "LT"in the changelogs or the commits history, and didn't find anything in the listed issues.

## Bug description

I have 8 layers. 0 is qwerty, 1 is symbols, 2 is numbers, layer 6 is a Colemak layout.
The other layers are not pertinent and layer 7 is a dummy layer I created for diagnosis purposes.

On layer 0, my two main thumb keys are set as follows : LT(1, KC_ENT) and LT(2, KC_SPC). It works flawflessly.

I've added the exact code for the thumb buttons on layers 6 (Colemak).

- the "tap" functions work as expected, I get KC_ENT and KC_SPC
- however the "hold" functions do not. I cannot get to either layer 1 or 2 by holding the thumb keys
- I've added a test layer 7 and modified one of the thumb keys to LT(7, KC_ENT) and now it works

--> Apparently the layer-tap functionnality only works if the layer id supplied as the first argument is higher than the current layer? Has anyone a clue of what the problem is?

## keymap definition in C

```
const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
	[0] = LAYOUT_split_3x6_3(LCTL_T(KC_ESC), KC_A, KC_Z, KC_E, KC_R, KC_T, KC_Y, KC_U, KC_I, KC_O, KC_P, RCTL_T(KC_ESC), LALT_T(KC_ESC), KC_Q, KC_S, KC_D, KC_F, KC_G, KC_H, KC_J, KC_K, KC_L, FR_M, LALT_T(KC_4), LGUI_T(KC_SPC), KC_W, KC_X, KC_C, KC_V, KC_B, KC_N, fCOMM, fDOT, fSLSH, fCOLN, RGUI_T(KC_ENT), LCTL_T(KC_DEL), LT(2,KC_ENT), LSFT_T(KC_TAB), RSFT_T(KC_BSPC), LT(1,KC_SPC), RCTL_T(KC_ENT)),
	[1] = LAYOUT_split_3x6_3(KC_TRNS, fAMP, fHASH, fLCBR, fLABK, fTILD, fDEG, fRABK, fRCBR, fEQL, fPLUS, KC_TRNS, KC_TRNS, fPIPE, fDQUO, fLBRC, fLPRN, fDLR, fCIRC, fRPRN, fRBRC, fMINS, fASTR, KC_TRNS, LGUI_T(KC_ENT), fMICR, fBSLS, FR_AT, fUNDS, fPERC, fGRV, fQUES, fSCLN, fEXLM, fCOLN, KC_TRNS, KC_RALT, LT(3,KC_SPC), KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS),
	[2] = LAYOUT_split_3x6_3(KC_TRNS, KC_PAST, KC_P4, KC_P5, KC_P6, KC_PPLS, KC_PGUP, KC_HOME, KC_UP, KC_END, KC_PSCR, KC_TRNS, LALT_T(KC_BSPC), KC_P0, KC_P1, KC_P2, KC_P3, KC_PDOT, LCTL(KC_LEFT), KC_LEFT, KC_DOWN, KC_RGHT, LCTL(KC_RGHT), KC_TRNS, LGUI_T(KC_SPC), KC_PSLS, KC_P7, KC_P8, KC_P9, KC_PMNS, KC_PGDN, KC_BSPC, KC_CAPS, KC_DEL, KC_NLCK, LGUI_T(KC_SPC), LCTL_T(KC_DEL), DF(0), DF(2), KC_TRNS, LT(3,KC_ENT), LCTL_T(KC_APP)),
	[3] = LAYOUT_split_3x6_3(KC_TRNS, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7, KC_8, KC_9, KC_0, KC_TRNS, KC_TRNS, LGUI_T(KC_F1), LCTL_T(KC_F2), LALT_T(KC_F3), LSFT_T(KC_F4), KC_F5, KC_F6, LSFT_T(KC_F7), LALT_T(KC_F8), LCTL_T(KC_F9), LGUI_T(KC_F10), KC_TRNS, KC_TRNS, TO(4), KC_MRWD, KC_MPLY, KC_MFFD, KC_F11, KC_F12, KC_VOLD, KC_MUTE, KC_VOLU, KC_NO, LGUI_T(KC_ENT), KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS),
	[4] = LAYOUT_split_3x6_3(KC_TRNS, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_WH_U, KC_MS_U, KC_WH_D, KC_NO, KC_TRNS, KC_TRNS, KC_NO, KC_ACL0, KC_ACL1, KC_ACL2, KC_NO, KC_WH_L, KC_MS_L, KC_MS_D, KC_MS_R, KC_WH_R, KC_TRNS, KC_TRNS, KC_NO, KC_NO, DF(5), DF(6), KC_NO, KC_BTN4, KC_BTN1, KC_BTN3, KC_BTN2, KC_BTN5, KC_TRNS, KC_NO, TO(0), KC_NO, KC_BTN1, KC_ACL2, KC_NO),
	[5] = LAYOUT_split_3x6_3(KC_TRNS, KC_A, KC_Z, KC_F, KC_P, KC_B, KC_J, KC_L, KC_U, KC_Y, fCOLN, KC_TRNS, KC_TRNS, KC_Q, KC_R, KC_S, KC_T, KC_G, FR_M, KC_N, KC_E, KC_I, KC_O, KC_TRNS, KC_TRNS, KC_W, KC_X, KC_C, KC_D, KC_V, KC_K, KC_H, fCOMM, fDOT, fSLSH, KC_TRNS, DF(0), LT(7,KC_ENT), LSFT_T(KC_TAB), LSFT_T(KC_BSPC), LT(1,KC_SPC), RCTL_T(KC_ENT)),
	[6] = LAYOUT_split_3x6_3(KC_TRNS, KC_A, KC_Z, KC_D, KC_F, KC_B, KC_Y, KC_J, KC_K, KC_L, KC_P, KC_TRNS, KC_TRNS, KC_Q, KC_S, KC_E, KC_T, KC_G, KC_H, KC_N, KC_I, KC_O, KC_R, KC_TRNS, KC_TRNS, KC_W, KC_X, KC_C, KC_V, fCOMM, fDOT, KC_U, FR_M, fSLSH, fCOLN, KC_TRNS, DF(0), LT(2, KC_ENT), KC_TRNS, KC_TRNS, LT(1,KC_SPACE), KC_TRNS),
	[7] = LAYOUT_split_3x6_3(KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_Q, KC_W, KC_E, KC_R, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, DF(0), KC_NO, KC_NO, KC_NO, KC_NO, KC_NO)
};
```


## System Information

 - Keyboard:  crkbd
 - Operating system: Linux Mint 19
 - AVR GCC version: 5.4.0
 - ARM GCC version: 6.3.1
 - QMK Firmware version: 0.12.50
 - Any keyboard related software installed? Nope.
